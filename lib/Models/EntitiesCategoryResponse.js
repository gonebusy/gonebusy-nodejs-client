/**
 * gonebusy
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of EntitiesCategoryResponse
 */
class EntitiesCategoryResponse extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.id = this.constructor.getValue(obj.id);
        this.name = this.constructor.getValue(obj.name);
        this.shortName = this.constructor.getValue(obj.shortName || obj.short_name);
        this.longName = this.constructor.getValue(obj.longName || obj.long_name);
        this.description = this.constructor.getValue(obj.description);
        this.parentCategoryId =
          this.constructor.getValue(obj.parentCategoryId
     || obj.parent_category_id);
        this.isActive = this.constructor.getValue(obj.isActive || obj.is_active);
        this.subcategories = this.constructor.getValue(obj.subcategories);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'id', realName: 'id' },
            { name: 'name', realName: 'name' },
            { name: 'shortName', realName: 'short_name' },
            { name: 'longName', realName: 'long_name' },
            { name: 'description', realName: 'description' },
            { name: 'parentCategoryId', realName: 'parent_category_id' },
            { name: 'isActive', realName: 'is_active' },
            { name: 'subcategories', realName: 'subcategories', array: true },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = EntitiesCategoryResponse;
